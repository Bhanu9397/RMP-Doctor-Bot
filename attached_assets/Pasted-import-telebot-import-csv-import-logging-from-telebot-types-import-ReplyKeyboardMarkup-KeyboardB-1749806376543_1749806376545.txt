import telebot
import csv
import logging
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

# Configure logging
logging.basicConfig(filename='first_aid_bot.log', level=logging.INFO, format='%(asctime)s - %(message)s')

# Initialize the Telegram bot
bot = telebot.TeleBot("5973069031:AAHfMJxy81Myv6kmlOPjZmat3UTRtzIwEgg")  # Your bot token

# Store user conversation states
user_states = {}

# Load first aid instructions from CSV
def load_csv():
    instructions = []
    try:
        with open("/content/firstaid.csv", "r", encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            required_fields = ['label', 'scenario', 'adult_instructions', 'child_instructions']
            for row in reader:
                if all(field in row and row[field] for field in required_fields):
                    instructions.append({
                        'label': row['label'],
                        'scenario': row['scenario'],
                        'adult_instructions': row['adult_instructions'].strip(),
                        'child_instructions': row['child_instructions'].strip()
                    })
                else:
                    logging.warning(f"Skipping invalid row: {row}")
        if not instructions:
            logging.error("No valid rows loaded from CSV. Using fallback data.")
            return [
                {'label': 'burns', 'scenario': 'Burns', 'adult_instructions': 'Cool the burn with running water for 10 minutes. Cover with cling film or a clean, non-stick dressing. Do not apply creams, ice, or butter. Seek medical help if the burn is larger than 3 inches or on the face, hands, or feet.', 'child_instructions': 'Cool the burn with running water for 10 minutes. Cover with cling film or a clean, non-stick dressing. Do not apply creams, ice, or butter. Seek medical help immediately for any burn larger than the child’s palm or on sensitive areas.'},
                {'label': 'choking', 'scenario': 'Choking', 'adult_instructions': 'Encourage coughing. If ineffective, give 5 back blows between shoulder blades. Perform 5 abdominal thrusts (Heimlich maneuver). Call emergency services if choking persists.', 'child_instructions': 'Encourage coughing. For infants (<1 year): 5 back blows and 5 chest thrusts. For children (>1 year): 5 back blows and 5 abdominal thrusts with caution. Call emergency services immediately.'}
            ]
        logging.info(f"Loaded {len(instructions)} scenarios from CSV")
    except FileNotFoundError:
        logging.error("firstaid.csv not found. Using fallback data.")
        return [
            {'label': 'burns', 'scenario': 'Burns', 'adult_instructions': 'Cool the burn with running water for 10 minutes. Cover with cling film or a clean, non-stick dressing. Do not apply creams, ice, or butter. Seek medical help if the burn is larger than 3 inches or on the face, hands, or feet.', 'child_instructions': 'Cool the burn with running water for 10 minutes. Cover with cling film or a clean, non-stick dressing. Do not apply creams, ice, or butter. Seek medical help immediately for any burn larger than the child’s palm or on sensitive areas.'},
            {'label': 'choking', 'scenario': 'Choking', 'adult_instructions': 'Encourage coughing. If ineffective, give 5 back blows between shoulder blades. Perform 5 abdominal thrusts (Heimlich maneuver). Call emergency services if choking persists.', 'child_instructions': 'Encourage coughing. For infants (<1 year): 5 back blows and 5 chest thrusts. For children (>1 year): 5 back blows and 5 abdominal thrusts with caution. Call emergency services immediately.'}
        ]
    except Exception as e:
        logging.error(f"Error loading CSV: {str(e)}. Using fallback data.")
        return [
            {'label': 'burns', 'scenario': 'Burns', 'adult_instructions': 'Cool the burn with running water for 10 minutes. Cover with cling film or a clean, non-stick dressing. Do not apply creams, ice, or butter. Seek medical help if the burn is larger than 3 inches or on the face, hands, or feet.', 'child_instructions': 'Cool the burn with running water for 10 minutes. Cover with cling film or a clean, non-stick dressing. Do not apply creams, ice, or butter. Seek medical help immediately for any burn larger than the child’s palm or on sensitive areas.'},
            {'label': 'choking', 'scenario': 'Choking', 'adult_instructions': 'Encourage coughing. If ineffective, give 5 back blows between shoulder blades. Perform 5 abdominal thrusts (Heimlich maneuver). Call emergency services if choking persists.', 'child_instructions': 'Encourage coughing. For infants (<1 year): 5 back blows and 5 chest thrusts. For children (>1 year): 5 back blows and 5 abdominal thrusts with caution. Call emergency services immediately.'}
        ]
    return instructions

instructions = load_csv()
scenario_list = [instr['scenario'] for instr in instructions]

# Handle the /start command and display scenario buttons
@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    user_states[chat_id] = {'state': 'idle'}
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = [KeyboardButton(scenario['scenario']) for scenario in instructions]
    markup.add(*buttons)
    bot.send_message(chat_id, "Welcome to the First Aid Bot! Select a first aid scenario or type your own (e.g., 'fever', 'earache'):", reply_markup=markup)
    logging.info(f"User {chat_id} started bot. Scenarios offered: {len(scenario_list)}")

# Handle scenario button clicks
@bot.message_handler(func=lambda message: message.text in scenario_list)
def handle_scenario(message):
    chat_id = message.chat.id
    user_states[chat_id] = {'state': 'awaiting_age', 'scenario': message.text}
    bot.send_message(chat_id, "Please enter your age (e.g., 25).")
    logging.info(f"User {chat_id} selected scenario: {message.text}")

# Handle user input
@bot.message_handler(func=lambda message: not message.text.startswith('/'))
def handle_text(message):
    chat_id = message.chat.id
    if chat_id not in user_states:
        user_states[chat_id] = {'state': 'idle'}

    if user_states[chat_id]['state'] == 'awaiting_age':
        try:
            age = int(message.text.strip())
            scenario = user_states[chat_id]['scenario']
            for instr in instructions:
                if instr['scenario'] == scenario:
                    response = instr['adult_instructions'] if age >= 16 else instr['child_instructions']
                    bot.send_message(chat_id, f"**{scenario}**\n\n{response}", parse_mode='Markdown')
                    logging.info(f"User {chat_id} provided age {age} for {scenario}")
                    break
            user_states[chat_id]['state'] = 'idle'
        except ValueError:
            bot.send_message(chat_id, "Please enter a valid age as a number (e.g., 25).")
            logging.warning(f"User {chat_id} provided invalid age: {message.text}")
    else:
        scenario = message.text.lower().strip()
        found = False
        for instruction in instructions:
            if scenario in instruction['scenario'].lower():
                user_states[chat_id] = {'state': 'awaiting_age', 'scenario': instruction['scenario']}
                bot.send_message(chat_id, f"Understood: **{instruction['scenario']}**\nPlease enter your age (e.g., 25).", parse_mode='Markdown')
                logging.info(f"User {chat_id} input '{scenario}' matched '{instruction['scenario']}'")
                found = True
                break
        if not found:
            bot.send_message(chat_id, f"No match for '{scenario}'. Please select a scenario or try again.")
            logging.info(f"User {chat_id} input '{scenario}' unmatched")

# Handle all other messages
@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "Welcome to the First Aid Bot! Use /start to see scenarios.")
    logging.info(f"User {chat_id} sent unhandled message: {message.text}")

# Polling loop
if __name__ == "__main__":
    logging.info("Bot starting polling...")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logging.error(f"Bot polling failed: {str(e)}")